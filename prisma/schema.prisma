datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String()
  access_token             String? @db.String()
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String()
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boards Board[]
}
 

model Board {
  id        String    @id @default(cuid())
  title     String
  columns   Column[] 
  userId String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  index Int
}

model Column {
  id        String   @id @default(cuid())
  title     String
  color     String
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id],onDelete: Cascade)
  tasks     Task[]
  index Int
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String
  columnId    String
  column      Column    @relation(fields: [columnId], references: [id],onDelete: Cascade)
  subtasks    Subtask[]
  index Int
}

model Subtask {
  id        String   @id @default(cuid())
  title     String
  checked   Boolean
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id],onDelete: Cascade)
  index Int
}